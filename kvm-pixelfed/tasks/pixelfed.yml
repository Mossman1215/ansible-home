---
- name: install rmpfusion gpg
  rpm_key:
    state: present
    key: "https://rpmfusion.org/keys?action=AttachFile&do=get&target=RPM-GPG-KEY-rpmfusion-{{item}}-el-9"
  loop:
    - free
    - nonfree
- name: install epel gpg
  rpm_key:
    state: present
    key: http://download.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-9
- name: install rpmfusion epel repos
  dnf:
    name: 
      - https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
      - https://download1.rpmfusion.org/free/el/rpmfusion-free-release-9.noarch.rpm
      - https://download1.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-9.noarch.rpm
    state: present
#dnf install ffmpeg
- name: ffmpeg composer
  dnf:
    name: 
      - ffmpeg
      - composer
    state: present
#http://prdownloads.sourceforge.net/optipng/optipng-0.7.7.tar.gz?download
#configure
#make install

#git clone https://github.com/tjko/jpegoptim.git
#configure
#make install

#git clone --recurse-submodules --remote-submodules https://github.com/kornelski/pngquant
#cargo install?
- name: pngquant clone
  git:
    accept_newhostkey: yes
    repo: https://github.com/kornelski/pngquant
    dest: /opt/pngquant
- name: ensure cargo is here
  dnf:
    state: latest
    name: cargo
- name: pngquant install
  command:
    cmd: cargo build --release
    chdir: /opt/pngquant
- name: copy pngquant
  copy:
    remote_src: yes
    src: /opt/pngquant/target/release/pngquant
    dest: /usr/local/bin/
- name: ensure dir
  file:
    path: /web/pixelfed
    state: directory
    owner: pixelfed
    group: nginx
- name: pixelfed clone
  git:
    accept_newhostkey: yes
    repo: https://github.com/pixelfed/pixelfed.git
    dest: /web/pixelfed
    single_branch: yes
    version: dev
#setup database
- name: ensure dir
  file:
    path: /etc/mysql
    state: directory
- name: build my.cnf file
  template:
    src: ../templates/my.cnf.j2
    dest: /etc/mysql/my.cnf
- name: create db user conf
  template:
    src: ../templates/pixelfed.cnf.j2
    dest: /home/pixelfed/.my.cnf
    
- name: start redis
  service:
    name: redis
    state: started
    enabled: yes
- name: start db
  service:
    name: mariadb
    state: started
    enabled: yes
- name: make db user
  command:
    cmd: "mysql -e \"CREATE USER IF NOT EXISTS 'pixelfed'@'localhost' IDENTIFIED BY '{{ db_password }}';\""
- name: make db
  command:
    cmd: "mysql -e \"CREATE DATABASE IF NOT EXISTS pixelfed CHARACTER SET utf8mb4\""
- name: set priviledges
  command:
    cmd: "mysql -e \" GRANT ALL PRIVILEGES ON pixelfed.* TO 'pixelfed'@'localhost';\""
- name: copy nginx config files
  copy:
    src: "../files/pixelfed-nginx.conf"
    dest: /etc/nginx/conf.d/pixelfed.conf
  register: nginx_conf
- name: start nginx
  service:
    name: nginx
    state: restarted
    enabled: yes
  when: nginx_conf.changed
- name: copy php fpm config
  copy:
    src: "../files/pixelfed-fpm.conf"
    dest: /etc/php-fpm.d/pixelfed.conf
  register: fpm_conf
- name: start fpm-pool
  service:
    name: php-fpm
    state: restarted
    enabled: yes
  when: fpm_conf.changed
# composer install
- name: composer install
  command:
    cmd: composer install --no-ansi --no-interaction --optimize-autoloader
    chdir: /web/pixelfed
    creates: /web/pixelfed/vendor/autoload.php
# web apps folder
# set permissions
- name: fix folder perms
  file:
    path: /web/pixelfed
    state: directory
    owner: pixelfed
    group: nginx
    recurse: yes
- name: nginx folder
  file:
    path: /web/pixelfed/nginx/
    state: directory
    owner: nginx
    group: nginx
    recurse: yes
# build environment vars file
- name: build environment file
  template:
    src: ../templates/.env.j2
    dest: /web/pixelfed/.env
    owner: pixelfed
    group: pixelfed

# mailhog?
#https://github.com/mailhog/MailHog/releases/download/v1.0.1/MailHog_windows_amd64.exe

# One time only, you need to generate the secret APP_KEY:

# php artisan key:generate

# One time only, the storage/ directory must be linked to the application:

# php artisan storage:link

# Database migrations must be run:

# php artisan migrate --force

# If you want to enable support for location data:

# php artisan import:cities

# If you enabled ActivityPub federation:

# php artisan instance:actor

# If you enabled OAuth:

# php artisan passport:keys

# Routes should be cached whenever the source code changes or whenever you change routes:

# php artisan route:cache
# php artisan view:cache

# Every time you edit your .env file, you must run this command to have the changes take effect:

# php artisan config:cache
